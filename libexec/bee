#!/usr/bin/env bash
#
# üêù bee - plugin-based automation - "it's just bash"
#
# Shell Style Guide
# https://google.github.io/styleguide/shell.xml
set -eu

MODE_INTERNAL=0
MODE_COMMAND=1
MODE=${MODE_INTERNAL}
T=${SECONDS}

resolve_bee_home() {
  local currentDir="${PWD}"
  local bee_home="$1"

  while [[ -L "${bee_home}" ]]; do
    local dir="$(dirname "${bee_home}")"
    bee_home="$(readlink "${bee_home}")"
    cd "${dir}"
    cd "$(dirname "${bee_home}")"
  done

  bee_home="$(cd "$(dirname "${bee_home}")"/.. && pwd)"
  cd "${currentDir}"
  echo "${bee_home}"
}

export BEE_HOME="$(resolve_bee_home "${BASH_SOURCE[0]}")"

plugins() {
  for dir in "${BEE_PLUGINS[@]}"; do
    for path in "${dir}"/*; do
      if [[ -d "${path}" ]]; then
        echo "$(basename "${path}")"
      fi
    done
  done
}

commands() {
  compgen -A function | grep --color=never '^[_a-zA-Z]*::[a-zA-Z]'
}

new() {
  if [[ $# -eq 0 ]]; then
    if [[ -f bee.sh ]]; then
      echo "bee.sh already exists"
      exit 1
    fi
    echo '#!/usr/bin/env bash' > bee.sh
    echo "PROJECT=\"$(basename "${PWD}")\"" >> bee.sh
    echo 'PLUGINS=()
RESOURCES=.bee

# Run bee new <plugins> to print all required variables
# e.g. bee new git utils version' >> bee.sh

    echo "created ${PWD}/bee.sh"
  else
    source_plugins "$@"
    local plugins=("$@")
    local template=""
    for pluginName in "${plugins[@]}"; do
      template="${template}\n$("${pluginName}::_new")\n"
    done
    echo -e "${template}"
    command -v pbcopy &> /dev/null && {
      echo -e "${template}" | pbcopy
      echo "(template has been copied to clipboard)"
    }
  fi
}

deps() {
  missing=()
  for pluginName in "${PLUGINS[@]}"; do
    local func="${pluginName}::_deps"

    if [[ $(command -v "${func}") == "${func}" ]]; then
      local deps=$(${func})
      local result=""

      for dep in ${deps}; do
        local found=false
        for p in "${PLUGINS[@]}"; do
          if [[ "${p}" == "${dep}" ]]; then
            found=true
            break
          fi
        done

        if [[ ${found} == true ]]; then
          result="${result} \033[32m${dep}\033[0m"
        else
          result="${result} \033[31m${dep}\033[0m"
          missing+=(${dep})
        fi
      done

      echo -e "${pluginName} =>${result}"
    fi
  done

  if [[ ${#missing[@]} -gt 0 ]]; then
    echo ""
    echo "Missing dependencies:"
    echo "${missing[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '
  fi
}

res() {
  for pluginName in "$@"; do
    for dir in "${BEE_PLUGINS[@]}"; do
      local templateDir="${dir}/${pluginName}/templates"
      if [[ -d "${templateDir}" ]]; then
        local targetDir="${RESOURCES}/${pluginName}"
        echo "Copying resources into ${targetDir}"
        mkdir -p "${targetDir}/"
        cp -r "${templateDir}/"* "${targetDir}/"
      fi
    done
  done
}

version() {
  local remote_version="$(curl -fsL https://raw.githubusercontent.com/sschmid/bee/master/version.txt)"
  local local_version="$(cat "${BEE_HOME}/version.txt")"
  if [[ -n "${remote_version}" ]]; then
    echo "bee ${local_version} (latest version: ${remote_version})"
  else
    echo "bee ${local_version}"
  fi
}

update() {
  pushd "${BEE_HOME}" > /dev/null
    git pull
    echo "bee is up-to-date and ready to bzzzz"
  popd > /dev/null
}

wiki() {
  open "https://github.com/sschmid/bee/wiki"
}

help() {
  if [[ $# -eq 1 ]]; then
    local found=false
    for dir in "${BEE_PLUGINS[@]}"; do
      local readme="${dir}/$1/README.md"
      if [[ -f "${readme}" ]]; then
        less "${readme}"
        found=true
      fi
    done
    if [[ ${found} == false ]]; then
      echo "Help for $1 doesn't exit"
    fi
  else
    local local_version="$(cat "${BEE_HOME}/version.txt")"
    echo "üêù bee ${local_version} - plugin-based automation - \"it's just bash\""
    echo '
usage:
    bee help <plugin> - print readme for plugin
    bee plugins       - print all plugins
    bee commands      - print all commands of enabled plugins
    bee new           - create new bee.sh file
    bee new <plugins> - print code templates for plugins
    bee res <plugins> - copy template files into resources dir
    bee deps          - print dependencies of enabled plugins
    bee <COMMAND>     - run command
    bee version       - print version
    bee update        - update bee to latest version
    bee wiki          - open wiki

available options:
    -v                - verbose output

customization:
    see ~/.beerc

EXAMPLE
    bee slack::message
    bee -v version::bump_minor
    bee ios::archive'
  fi
}

‚ù§Ô∏è() {
  open "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=M7WHTWP4GE75Y"
}

terminate() {
  local exitCode=$?
  if [[ ${MODE} -eq ${MODE_COMMAND} ]]; then
    if [[ ${exitCode} -eq 0 ]]; then
      log "bzzzz ($((${SECONDS} - ${T})) seconds)"
    else
      log "‚ùå bzzzz ($((${SECONDS} - ${T})) seconds)"
    fi
  fi
}

main() {
  trap terminate EXIT

  source "${BEE_HOME}/libexec/bee_log"
  source "${BEE_HOME}/libexec/bee_utils"
  source_config

  if [[ -f bee.sh ]]; then
    source bee.sh
    source_plugins "${PLUGINS[@]}"
  fi

  if [[ $# -gt 0 ]]; then
    if [[ "$1" = "-v" ]]; then
      shift
      set -x
    fi

    T=${SECONDS}

    local cmd=($@)

    if [[ $(command -v "${cmd}") != "${cmd}" ]]; then
      # command not found
      # try loading as a plugin
      source_plugins "${cmd}"
      shift
    fi

    if [[ "$@" == *"::"* ]]; then
      MODE=${MODE_COMMAND}
      "$@"
    else
      MODE=${MODE_INTERNAL}
      "$@"
    fi
  else
    help
  fi
}

main "$@"
