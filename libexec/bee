#!/usr/bin/env bash
#
# üêù bee - plugin-based automation - "it's just bash"
#
# Shell Style Guide
# https://google.github.io/styleguide/shell.xml
set -eu

resolve_bee_home() {
  local cwd="${PWD}"
  local bee_home="$1"

  while [[ -L "${bee_home}" ]]; do
    local dir="$(dirname "${bee_home}")"
    bee_home="$(readlink "${bee_home}")"
    cd "${dir}"
    cd "$(dirname "${bee_home}")"
  done

  bee_home="$(cd "$(dirname "${bee_home}")"/.. && pwd)"
  cd "${cwd}"
  echo "${bee_home}"
}

export BEE_HOME="$(resolve_bee_home "${BASH_SOURCE[0]}")"

plugins() {
  for d in "${BEE_PLUGINS[@]}"; do
    for f in "${d}"/*; do
      if [[ -d "${f}" ]]; then
        basename "${f}"
      fi
    done
  done
}

commands() {
  compgen -A function | grep '^[_a-zA-Z]*::[a-zA-Z]'
}

new() {
  if [[ $# -eq 0 ]]; then
    if [[ -f bee.sh ]]; then
      echo "bee.sh already exists"
      exit 1
    fi
    echo '#!/usr/bin/env bash
PROJECT="MyProject"
PLUGINS=(git utils version)
RESOURCES=.bee

# Run bee new <plugins> to print all required variables
# e.g. bee new git utils version' >> bee.sh

    echo "created ${PWD}/bee.sh"
  else
    source_plugins "$@"
    local plugins=("$@")
    local template=""
    for p in "${plugins[@]}"; do
      template="${template}\n$("${p}::_new")\n"
    done
    echo -e "${template}"
    command -v pbcopy &>/dev/null && {
      echo -e "${template}" | pbcopy
      echo ""
      echo "(template has been copied to the clipboard)"
    }
  fi
}

deps() {
  missing=()
  for p in "${PLUGINS[@]}"; do
    local f="${p}::_deps"

    if [[ $(command -v "${f}") == "${f}" ]]; then
      local deps=$(${f})
      local result=""

      for d in ${deps}; do
        local found=false
        for u in "${PLUGINS[@]}"; do
          if [[ "${u}" == "${d}" ]]; then
            found=true
            break
          fi
        done

        if [[ ${found} == true ]]; then
          result="${result} ${d}"
        else
          result="${result} \033[1m${d}\033[0m"
          missing+=(${d})
        fi
      done

      echo -e "${p} =>${result}"
    fi
  done

  if [[ ${#missing[@]} -gt 0 ]]; then
    echo ""
    echo "Missing dependencies:"
    echo "${missing[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '
  fi
}

res() {
  for p in "$@"; do
    for d in "${BEE_PLUGINS[@]}"; do
      local t="${d}/${p}/templates"
      if [[ -d "${t}" ]]; then
        echo "Copying resources into ${RESOURCES}/${p}"
        mkdir -p "${RESOURCES}/${p}/"
        cp -r "${t}/"* "${RESOURCES}/${p}/"
      fi
    done
  done
}

version() {
  local remote_version="$(curl -fsL https://raw.githubusercontent.com/sschmid/bee/master/version.txt)"
  local local_version="$(cat "${BEE_HOME}/version.txt")"
  if [[ -n "${remote_version}" ]]; then
    echo "bee ${local_version} (latest version: ${remote_version})"
  else
    echo "bee ${local_version}"
  fi
}

update() {
  pushd "${BEE_HOME}" >/dev/null
    git pull
    echo "bee is up-to-date and ready to bzzzz"
  popd >/dev/null
}

wiki() {
  open "https://github.com/sschmid/bee/wiki"
}

help() {
  if [[ $# -eq 1 ]]; then
    local found=false
    for d in "${BEE_PLUGINS[@]}"; do
      local readme="${d}/$1/README.md"
      if [[ -f "${readme}" ]]; then
        cat "${readme}"
        found=true
      fi
    done
    if [[ ${found} == false ]]; then
      echo "Help for $1 doesn't exit"
    fi
  else
    local local_version="$(cat "${BEE_HOME}/version.txt")"
    echo "üêù bee ${local_version} - plugin-based automation - \"it's just bash\""
    echo '
usage:
    bee help <plugin> - print readme for plugin
    bee plugins       - print all plugins
    bee commands      - print all commands of enabled plugins
    bee new           - create new bee.sh file
    bee new <plugins> - print code templates for plugins
    bee res <plugins> - copy template files into resources dir
    bee [COMMAND]     - run command
    bee version       - print version
    bee update        - update bee to latest version
    bee wiki          - open wiki

available options:
    -v                - verbose output

customization:
    see ~/.beerc

EXAMPLE
    bee msbuild::build
    bee -v version::bump_minor
    bee ios::archive'
  fi
}

‚ù§Ô∏è() {
  open "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=M7WHTWP4GE75Y"
}

main() {
  source "${BEE_HOME}/libexec/bee_log"
  source "${BEE_HOME}/libexec/bee_utils"
  source_config

  if [[ -f bee.sh ]]; then
    source bee.sh
    source_plugins "${PLUGINS[@]}"
  fi

  if [[ $# -gt 0 ]]; then
    if [[ "$1" = "-v" ]]; then
      shift
      set -x
    fi

    local t=${SECONDS}

    local cmd=($@)

    if [[ $(command -v "${cmd}") == "${cmd}" ]]; then
      # command found
      "$@"
    else
      # command not found
      # try loading as a plugin
      source_plugins "${cmd}"
      shift
      "$@"
    fi

    if [[ "$@" == *"::"* ]]; then
      log "bzzzz ($((${SECONDS} - ${t})) seconds)"
    fi
  else
    help
  fi
}

main "$@"
