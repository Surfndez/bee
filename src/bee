#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

################################################################################
# log
################################################################################

BEE_QUIET=0

bee::log_echo() {
  if ((!BEE_QUIET)); then
    echo "$*"
  fi
}

bee::log() {
  bee::log_echo "🐝 $*"
}

bee::log_info() {
  bee::log_echo "################################################################################"
  bee::log "$*"
  bee::log_echo "################################################################################"
}

bee::log_func() {
  bee::log_info "${FUNCNAME[1]} $*"
}

bee::log_warn() {
  echo "🟠 $*" >&2
}

bee::log_error() {
  echo "🔴 $*" >&2
}

bee::log_var() {
  echo "${!1}"
}

################################################################################
# modules
################################################################################

BEE_MODULES_PATH="${BEE_HOME}/src/modules"

BEE_LOAD_MODULE_NAME=""
declare -A BEE_LOAD_MODULE_LOADED=()

bee::load_module() {
  local module="$1"
  if [[ ! -v BEE_LOAD_MODULE_LOADED["${module}"] ]]; then
    local module_path="${BEE_MODULES_PATH}/bee-${module}.sh"
    if [[ -f "${module_path}" ]]; then
      source "${module_path}"
      BEE_LOAD_MODULE_NAME="${module}"
    else
      BEE_LOAD_MODULE_NAME=""
    fi
    BEE_LOAD_MODULE_LOADED["${module}"]="${BEE_LOAD_MODULE_NAME}"
  else
    BEE_LOAD_MODULE_NAME="${BEE_LOAD_MODULE_LOADED["${module}"]}"
  fi
}

bee::run_module() {
  "bee::${BEE_LOAD_MODULE_NAME}" "$@"
}

################################################################################
# plugins
################################################################################

BEE_RESOLVE_PLUGIN_NAME=""
BEE_RESOLVE_PLUGIN_PATH=""
declare -A BEE_RESOLVE_PLUGIN_NAME_CACHE=()
declare -A BEE_RESOLVE_PLUGIN_PATH_CACHE=()

bee::resolve_plugin() {
  local plugin="$1"
  local plugin_version="${plugin##*:}"
  BEE_RESOLVE_PLUGIN_NAME="${plugin%:*}"
  if [[ ! -v BEE_RESOLVE_PLUGIN_PATH_CACHE["${plugin}"] ]]; then
    if [[ "${BEE_RESOLVE_PLUGIN_NAME}" == "${plugin_version}" && -d "${BEE_PLUGINS_PATH}/${plugin}" ]]; then
      plugin_version="$(basename "$(ls -d "${BEE_PLUGINS_PATH}/${plugin}/"*/ | sort -rV | head -n 1)")"
    fi
    BEE_RESOLVE_PLUGIN_PATH="${BEE_PLUGINS_PATH}/${BEE_RESOLVE_PLUGIN_NAME}/${plugin_version}/${BEE_RESOLVE_PLUGIN_NAME}.sh"
    if [[ -f "${BEE_RESOLVE_PLUGIN_PATH}" ]]; then
      BEE_RESOLVE_PLUGIN_PATH_CACHE["${BEE_RESOLVE_PLUGIN_NAME}:${plugin_version}"]="${BEE_RESOLVE_PLUGIN_PATH}"
    else
      BEE_RESOLVE_PLUGIN_PATH=""
    fi
    BEE_RESOLVE_PLUGIN_PATH_CACHE["${plugin}"]="${BEE_RESOLVE_PLUGIN_PATH}"
  else
    BEE_RESOLVE_PLUGIN_PATH="${BEE_RESOLVE_PLUGIN_PATH_CACHE["${plugin}"]}"
  fi
}

BEE_LOAD_PLUGIN_NAME=""
declare -A BEE_LOAD_PLUGIN_LOADED=()
BEE_LOAD_PLUGIN_MISSING=()

bee::load_plugin() {
  BEE_LOAD_PLUGIN_MISSING=()
  bee::resolve_plugin "$1"
  if [[ -n "${BEE_RESOLVE_PLUGIN_PATH}" ]]; then
    BEE_LOAD_PLUGIN_NAME="${BEE_RESOLVE_PLUGIN_NAME}"
    bee::load_plugin_deps "${BEE_LOAD_PLUGIN_NAME}"
    if [[ ${#BEE_LOAD_PLUGIN_MISSING[@]} -gt 0 ]]; then
      for missing in "${BEE_LOAD_PLUGIN_MISSING[@]}"; do
        bee::log_error "Missing plugin: '${missing}'"
      done
      exit 1
    fi
  else
    BEE_LOAD_PLUGIN_NAME=""
  fi
}

bee::load_plugin_deps() {
  if [[ ! -v BEE_LOAD_PLUGIN_LOADED["${BEE_RESOLVE_PLUGIN_PATH}"] ]]; then
    source "${BEE_RESOLVE_PLUGIN_PATH}"
    BEE_LOAD_PLUGIN_LOADED["${BEE_RESOLVE_PLUGIN_PATH}"]=1
    local deps="${BEE_RESOLVE_PLUGIN_NAME}::deps"
    if [[ $(command -v "${deps}") == "${deps}" ]]; then
      for dep in $("${deps}"); do
        bee::resolve_plugin "${dep}"
        if [[ -n "${BEE_RESOLVE_PLUGIN_PATH}" ]]; then
          bee::load_plugin_deps "${dep}"
        else
          BEE_LOAD_PLUGIN_MISSING+=("${dep}")
        fi
      done
    fi
  fi
}

bee::run_plugin() {
  if (($# > 0)); then
    local cmd="$1"
    shift
    "${BEE_LOAD_PLUGIN_NAME}::${cmd}" "$@"
  else
    "${BEE_LOAD_PLUGIN_NAME}::help"
  fi
}

################################################################################
# run
################################################################################

BEE_RC_LOADED=0

bee::load_beerc() {
  if ((!BEE_RC_LOADED)); then
    [[ ! -v BEE_RC ]] && BEE_RC="${HOME}/.beerc"
    [[ ! -f "${BEE_RC}" ]] && echo "# default beerc" >"${BEE_RC}"
    source "${BEE_RC}"
    BEE_RC_LOADED=1
  fi
}

bee::split_args() {
  local IFS=" "
  for arg in $@; do
    echo "${arg}"
  done
}

bee::batch() {
  for batch in "$@"; do
    local cmd="${batch%% *}"
    local args="${batch#* }"
    if [[ "${args}" != "${cmd}" ]]; then
      bee::run "${cmd}" $(bee::split_args "${args}")
    else
      bee::run "${cmd}"
    fi
  done
}

bee::run() {
  if (($# > 0)); then
    while (($# > 0)); do
      case "$1" in
        -q | --quiet) BEE_QUIET=1 ;;
        batch)
          shift
          bee::batch "$@"
          return
          ;;
        --)
          shift
          break
          ;;
        *) break ;;
      esac
      shift
    done

    bee::load_beerc

    if [[ "$1" =~ ^bee:: ]]; then
      "$@" # run as bee-builtin, e.g. bee::log "message"
    else
      bee::load_module "$1"
      if [[ -n "${BEE_LOAD_MODULE_NAME}" ]]; then
        shift
        bee::run_module "$@" # run as bee module, e.g. bee update
      else
        bee::load_plugin "$1"
        if [[ -n "${BEE_LOAD_PLUGIN_NAME}" ]]; then
          shift
          bee::run_plugin "$@" # run as bee plugin, e.g. bee github me
        else
          "$@" # run as command, e.g. bee echo "message"
        fi
      fi
    fi
  else
    echo "usage"
  fi
}

bee::run "$@"
