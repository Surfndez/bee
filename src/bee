#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

################################################################################
# log
################################################################################

BEE_QUIET=0

bee::log() {
  if ((!BEE_QUIET)); then
    echo "🐝 $*"
  fi
}

bee::log_info() {
  if ((!BEE_QUIET)); then
    echo "################################################################################"
    echo "🐝 $*"
    echo "################################################################################"
  fi
}

bee::log_func() {
  bee::log_info "${FUNCNAME[1]} $*"
}

bee::log_warn() {
  echo "🟠 $*" >&2
}

bee::log_error() {
  echo "🔴 $*" >&2
}

bee::log_var() {
  echo "${!1}"
}

################################################################################
# plugins
################################################################################

BEE_RESOLVE_PLUGIN_NAME=""
BEE_RESOLVE_PLUGIN_VERSION=""
BEE_RESOLVE_PLUGIN_PATH=""

bee::resolve_plugin() {
  local plugin="$1"
  BEE_RESOLVE_PLUGIN_NAME="${plugin%:*}"
  BEE_RESOLVE_PLUGIN_VERSION="${plugin##*:}"
  if [[ "${BEE_RESOLVE_PLUGIN_NAME}" == "${BEE_RESOLVE_PLUGIN_VERSION}" && -d "${BEE_PLUGINS_PATH}/${plugin}" ]]; then
    BEE_RESOLVE_PLUGIN_VERSION="$(basename "$(ls -d "${BEE_PLUGINS_PATH}/${plugin}/"*/ | sort -rV | head -n 1)")"
  fi
  BEE_RESOLVE_PLUGIN_PATH="${BEE_PLUGINS_PATH}/${BEE_RESOLVE_PLUGIN_NAME}/${BEE_RESOLVE_PLUGIN_VERSION}/${BEE_RESOLVE_PLUGIN_NAME}.sh"
  if [[ ! -f "${BEE_RESOLVE_PLUGIN_PATH}" ]]; then
    BEE_RESOLVE_PLUGIN_PATH=""
  fi
}

BEE_LOAD_PLUGIN_NAME=""

bee::load_plugin() {
  bee::resolve_plugin "$1"
  if [[ -n "${BEE_RESOLVE_PLUGIN_PATH}" ]]; then
    BEE_LOAD_PLUGIN_NAME="${BEE_RESOLVE_PLUGIN_NAME}"
    bee::load_plugin_deps "${BEE_LOAD_PLUGIN_NAME}"
  else
    BEE_LOAD_PLUGIN_NAME=""
  fi
}

bee::load_plugin_deps() {
  source "${BEE_RESOLVE_PLUGIN_PATH}"
  local deps="${BEE_RESOLVE_PLUGIN_NAME}::deps"
  if [[ $(command -v "${deps}") == "${deps}" ]]; then
    for dep in $("${deps}"); do
      bee::resolve_plugin "${dep}"
      if [[ -n "${BEE_RESOLVE_PLUGIN_PATH}" ]]; then
        bee::load_plugin_deps "${dep}"
      fi
    done
  fi
}

bee::run_plugin() {
  if (($# > 0)); then
    local cmd="$1"
    shift
    "${BEE_LOAD_PLUGIN_NAME}::${cmd}" "$@"
  else
    "${BEE_LOAD_PLUGIN_NAME}::help"
  fi
}

################################################################################
# run
################################################################################

BEE_RC_LOADED=0

bee::load_beerc() {
  if ((!BEE_RC_LOADED)); then
    [[ ! -v BEE_RC ]] && BEE_RC="${HOME}/.beerc"
    [[ ! -f "${BEE_RC}" ]] && echo "# default beerc" >"${BEE_RC}"
    source "${BEE_RC}"
    BEE_RC_LOADED=1
  fi
}

bee::split_args() {
  local IFS=" "
  for arg in $@; do
    echo "${arg}"
  done
}

bee::batch() {
  for batch in "$@"; do
    local cmd="${batch%% *}"
    local args="${batch#* }"
    if [[ "${args}" != "${cmd}" ]]; then
      bee::run "${cmd}" $(bee::split_args "${args}")
    else
      bee::run "${cmd}"
    fi
  done
}

bee::run() {
  if (($# > 0)); then
    while (($# > 0)); do
      case "$1" in
        -q | --quiet) BEE_QUIET=1 ;;
        batch)
          shift
          bee::batch "$@"
          return
          ;;
        --)
          shift
          break
          ;;
        *) break ;;
      esac
      shift
    done

    bee::load_beerc

    if [[ "$1" =~ ^bee:: ]]; then
      "$@"
    else
      bee::load_plugin "$1"
      if [[ -n "${BEE_LOAD_PLUGIN_NAME}" ]]; then
        shift
        bee::run_plugin "$@"
      else
        "$@"
      fi
    fi
  else
    echo "usage"
  fi
}

bee::run "$@"
